# bind 127.0.0.1

# 启用保护模式
# 即在没有使用bind指令绑定具体地址时
# 或在没有设定密码时
# Redis将拒绝来自外部的连接
# protected-mode yes

# 监听端口
port 6379

# 启动时不打印logo
# 这个不重要，想看logo就打开它
always-show-logo no

# 禁用KEYS命令
# 一方面 KEYS * 命令可以列出所有的键，会影响数据安全
# 另一方面 KEYS 命令会阻塞数据库，在数据库中存储了大量数据时，该命令会消耗很长时间
# 期间对Redis的访问也会被阻塞，而当锁释放的一瞬间，大量请求涌入Redis，会造成Redis直接崩溃
# rename-command KEYS ""

# 此外还应禁止 FLUSHALL 和 FLUSHDB 命令
# 这两个命令会清空数据，并且不会失败

################################ 快照  #################################
#
# Save the DB on disk:保存数据库到磁盘
#
#   save <秒> <更新>
#
#   如果指定的秒数和数据库写操作次数都满足了就将数据库保存。
#
#   下面是保存操作的实例：
#   900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化）
#   300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化）
#   60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）
#
#   注释：注释掉“save”这一行配置项就可以让保存数据库功能失效。
#
#   你也可以通过增加一个只有一个空字符串的配置项（如下面的实例）来去掉前面的“save”配置。
#
#   save ""

# save 900 1
# save 300 10
# save 60 10000

#在默认情况下，如果RDB快照持久化操作被激活（至少一个条件被激活）并且持久化操作失败，Redis则会停止接受更新操作。
#这样会让用户了解到数据没有被正确的存储到磁盘上。否则没人会注意到这个问题，可能会造成灾难。
#
#如果后台存储（持久化）操作进程再次工作，Redis会自动允许更新操作。
#
#然而，如果你已经恰当的配置了对Redis服务器的监视和备份，你也许想关掉这项功能。
#如此一来即使后台保存操作出错,redis也仍然可以继续像平常一样工作。
# stop-writes-on-bgsave-error yes

#是否在导出.rdb数据库文件的时候采用LZF压缩字符串和对象？
#默认情况下总是设置成‘yes’， 他看起来是一把双刃剑。
#如果你想在存储的子进程中节省一些CPU就设置成'no'，
#但是这样如果你的kye/value是可压缩的，你的到处数据接就会很大。
# rdbcompression yes

#从版本RDB版本5开始，一个CRC64的校验就被放在了文件末尾。
#这会让格式更加耐攻击，但是当存储或者加载rbd文件的时候会有一个10%左右的性能下降，
#所以，为了达到性能的最大化，你可以关掉这个配置项。
#
#没有校验的RDB文件会有一个0校验位，来告诉加载代码跳过校验检查。
# rdbchecksum yes

# RDB导出数据库的文件名称
# dbfilename dump.rdb

# ==============混合持久化=================
# 设定密码认证
requirepass "123456"

# 生成文件目录
dir "/data/redis"

# 混合持久化
aof-use-rdb-preamble yes

# 开启AOF模式
appendonly yes

# 持久化文件名
appendfilename "se_appendonly.aof"

# 重写规则_百分比
auto-aof-rewrite-percentage 100

# 重写规则_大小
auto-aof-rewrite-min-size 64mb